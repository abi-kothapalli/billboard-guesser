{"ast":null,"code":"var _jsxFileName = \"/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/components/loading.jsx\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Loading extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      seconds: this.props.backendActive ? 2 : 7\n    };\n\n    this.handleTimer = () => {\n      const seconds = this.state.seconds;\n\n      if (seconds > 0) {\n        // Count down seconds\n        setTimeout(() => this.setState({\n          seconds: seconds - 1\n        }), 1000);\n      } else {\n        // Timer has hit 0\n        if (!this.props.backendActive) {\n          // Backend is not even active so we are waiting for the backend to start running.\n          // We simply reload the page here.\n          window.location.reload();\n        } else {\n          // Backend is active, but likely sending back 425 (\"Too Early\") since the webscraper\n          // has not yet finished running.\n          axios.get(\"http://localhost:8080/\").then(res => {\n            // If res is successfully recieved, that means webscraper is finished and\n            // backend ready, so we simply reload the page to send the user into the gameplay\n            window.location.reload();\n          }).catch(error => {\n            if (error.request.status === 0) {\n              // Backend server is not being detected\n              window.location.reload();\n            } else {\n              if (error.response.status === 425) {\n                // Backend server is still loading, so keep counting\n                this.setState({\n                  seconds: 2\n                });\n              } else {\n                // Some other error with the backend, so reload to handle it\n                window.location.reload();\n              }\n            }\n          });\n        }\n      }\n    };\n  }\n\n  // Start running timer after the component mounts, and every time the component updates\n  componentDidMount() {\n    this.handleTimer();\n  }\n\n  componentDidUpdate() {\n    this.handleTimer();\n  }\n  /**\n   * @brief       Handler for timer on loading screen\n   * @details     Counts down the seconds, and when it hits 0, it handles it as\n   *              appropriate depending on the status of the backend server.\n   *\n   * @pre         App is displaying only the NavBar and Loading components\n   * @post        Either seconds counts down 1, or when it hits 0, it handles it as appropriate.\n   */\n\n\n  /**\n   * @brief           Render function for Loading component\n   * @details         Either renders a loading screen if waiting on backend, or a message\n   *                  to the user that the backend is not running\n   *\n   * @returns         Loading component\n   *\n   * @pre             Component is displaying message to user depending on whether backend is\n   *                  active or not\n   * @post            Component will countdown or reload the page when seconds is 0, in an\n   *                  attempt to continuously try resolving the issue with the backend\n   */\n  render() {\n    if (!this.props.backendActive) {\n      // Display message that the backend is not being detected\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jumbotron\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"display-4\",\n            children: \"Oh, no!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"lead\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"We could not reach the backend server.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), \" \", \"Please ensure that the backend server is active when trying to access this webpage. Once the backend server is active, you may manually refresh this page or wait for the page to automatically reload.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"my-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"This webpage will automatically be reloaded in\", \" \", this.state.seconds, \" seconds...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border ml-auto\",\n              role: \"status\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this);\n    } else {\n      // Display message that the backend is not ready yet and the page will load once ready\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jumbotron\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"display-4\",\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"lead\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"This webpage is currently loading.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), \" \", \"Please be patient.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: \"my-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"d-flex align-items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"This webpage will automatically be reloaded once ready.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner-border ml-auto\",\n              role: \"status\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/components/loading.jsx"],"names":["React","Component","axios","Loading","state","seconds","props","backendActive","handleTimer","setTimeout","setState","window","location","reload","get","then","res","catch","error","request","status","response","componentDidMount","componentDidUpdate","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nexport default class Loading extends Component {\n    // If the backend is active, refresh the page every 2 seconds to check when it is ready,\n    // if it is not active, refresh the page every 7 seconds until the backend is running\n    state = { seconds: this.props.backendActive ? 2 : 7 };\n\n    // Start running timer after the component mounts, and every time the component updates\n    componentDidMount() {\n        this.handleTimer();\n    }\n\n    componentDidUpdate() {\n        this.handleTimer();\n    }\n\n    /**\n     * @brief       Handler for timer on loading screen\n     * @details     Counts down the seconds, and when it hits 0, it handles it as\n     *              appropriate depending on the status of the backend server.\n     *\n     * @pre         App is displaying only the NavBar and Loading components\n     * @post        Either seconds counts down 1, or when it hits 0, it handles it as appropriate.\n     */\n    handleTimer = () => {\n        const seconds = this.state.seconds;\n        if (seconds > 0) {\n            // Count down seconds\n            setTimeout(() => this.setState({ seconds: seconds - 1 }), 1000);\n        } else {\n            // Timer has hit 0\n            if (!this.props.backendActive) {\n                // Backend is not even active so we are waiting for the backend to start running.\n                // We simply reload the page here.\n                window.location.reload();\n            } else {\n                // Backend is active, but likely sending back 425 (\"Too Early\") since the webscraper\n                // has not yet finished running.\n                axios\n                    .get(\"http://localhost:8080/\")\n                    .then((res) => {\n                        // If res is successfully recieved, that means webscraper is finished and\n                        // backend ready, so we simply reload the page to send the user into the gameplay\n                        window.location.reload();\n                    })\n                    .catch((error) => {\n                        if (error.request.status === 0) {\n                            // Backend server is not being detected\n                            window.location.reload();\n                        } else {\n                            if (error.response.status === 425) {\n                                // Backend server is still loading, so keep counting\n                                this.setState({ seconds: 2 });\n                            } else {\n                                // Some other error with the backend, so reload to handle it\n                                window.location.reload();\n                            }\n                        }\n                    });\n            }\n        }\n    };\n\n    /**\n     * @brief           Render function for Loading component\n     * @details         Either renders a loading screen if waiting on backend, or a message\n     *                  to the user that the backend is not running\n     *\n     * @returns         Loading component\n     *\n     * @pre             Component is displaying message to user depending on whether backend is\n     *                  active or not\n     * @post            Component will countdown or reload the page when seconds is 0, in an\n     *                  attempt to continuously try resolving the issue with the backend\n     */\n    render() {\n        if (!this.props.backendActive) {\n            // Display message that the backend is not being detected\n            return (\n                <div className=\"mt-3\">\n                    <div className=\"jumbotron\">\n                        <h1 className=\"display-4\">Oh, no!</h1>\n                        <p className=\"lead\">\n                            <strong>\n                                We could not reach the backend server.\n                            </strong>{\" \"}\n                            Please ensure that the backend server is active when\n                            trying to access this webpage. Once the backend\n                            server is active, you may manually refresh this page\n                            or wait for the page to automatically reload.\n                        </p>\n                        <hr className=\"my-4\" />\n                        <div className=\"d-flex align-items-center\">\n                            <p>\n                                This webpage will automatically be reloaded in{\" \"}\n                                {this.state.seconds} seconds...\n                            </p>\n                            <div\n                                className=\"spinner-border ml-auto\"\n                                role=\"status\"\n                                aria-hidden=\"true\"\n                            ></div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            // Display message that the backend is not ready yet and the page will load once ready\n            return (\n                <div className=\"mt-3\">\n                    <div className=\"jumbotron\">\n                        <h1 className=\"display-4\">Loading...</h1>\n                        <p className=\"lead\">\n                            <strong>This webpage is currently loading.</strong>{\" \"}\n                            Please be patient.\n                        </p>\n                        <hr className=\"my-4\" />\n                        <div className=\"d-flex align-items-center\">\n                            <p>\n                                This webpage will automatically be reloaded once\n                                ready.\n                            </p>\n                            <div\n                                className=\"spinner-border ml-auto\"\n                                role=\"status\"\n                                aria-hidden=\"true\"\n                            ></div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}