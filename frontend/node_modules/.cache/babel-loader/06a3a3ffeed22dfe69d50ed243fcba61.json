{"ast":null,"code":"var _jsxFileName = \"/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backendActive: false,\n      backendReady: false,\n      songDifficulty: 3,\n      currScore: 0,\n      highScore: 0,\n      panels: [],\n      songBank: [],\n      orderedSongIndices: []\n    };\n\n    this.handleDifficulty = delta => {\n      const songDifficulty = this.state.songDifficulty + delta;\n      let newPanels = [...this.state.panels];\n\n      if (delta === -1) {\n        let songToRemove = this.state.songBank[this.state.orderedSongIndices[songDifficulty]];\n        let item = newPanels.filter(song => song.title === songToRemove.title && song.artist === songToRemove.artist)[0];\n        const idx = newPanels.indexOf(item);\n        newPanels.splice(idx, 1);\n      } else {\n        newPanels.push(this.state.songBank[this.state.orderedSongIndices[songDifficulty - 1]]);\n        newPanels[newPanels.length - 2].last = false;\n      }\n\n      newPanels[newPanels.length - 1].last = true;\n      this.setState({\n        songDifficulty,\n        panels: newPanels\n      });\n    };\n\n    this.handleMove = (song, up) => {\n      let newPanels = [...this.state.panels];\n      const idx = newPanels.indexOf(song);\n\n      if (up) {\n        newPanels[idx - 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx - 1]\n        };\n      } else {\n        newPanels[idx + 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx + 1]\n        };\n      }\n\n      newPanels[0].first = true;\n      newPanels[1].first = false;\n      newPanels[newPanels.length - 1].last = true;\n      newPanels[newPanels.length - 2].last = false;\n      this.setState({\n        panels: newPanels\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        currScore: 0,\n        highScore: 0,\n        songDifficulty: 3,\n        panels: []\n      });\n      this.handleSongLoad();\n    };\n\n    this.handleSongLoad = () => {\n      let songIndices = Array(100).fill().map((_, index) => index);\n      let orderedSongIndices = this.shuffleIndices(songIndices);\n      let panels = [];\n\n      for (let i = 0; i < this.state.songDifficulty; i++) {\n        panels.push(this.state.songBank[orderedSongIndices[i]]);\n        panels[i].first = i === 0;\n        panels[i].last = i === this.state.songDifficulty - 1;\n      }\n\n      this.setState({\n        orderedSongIndices,\n        panels\n      });\n    };\n\n    this.shuffleIndices = indices => {\n      let currIdx = indices.length,\n          randIdx;\n\n      while (currIdx !== 0) {\n        randIdx = Math.floor(Math.random() * currIdx);\n        currIdx--; // And swap it with the current element.\n\n        [indices[currIdx], indices[randIdx]] = [indices[randIdx], indices[currIdx]];\n      }\n\n      return indices;\n    };\n\n    axios.get(\"http://localhost:8080/\").then(res => {\n      if (res.status === 200) {\n        this.setState({\n          backendActive: true,\n          backendReady: true,\n          songBank: res.data\n        });\n        this.handleSongLoad();\n      }\n    }).catch(error => {\n      if (error.request.status === 0) {\n        // Backend server is not being detected\n        this.setState({\n          backendActive: false,\n          backendReady: false\n        });\n      } else {\n        // Backend server is active but is likely sending back 425, since web scraper is not finished\n        if (error.response.status === 425) {\n          this.setState({\n            backendActive: true,\n            backendReady: false\n          });\n        } else {\n          this.setState({\n            backendActive: false,\n            backendReady: false\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    if (!this.state.backendActive || !this.state.backendReady) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(Loading, {\n            backendActive: this.state.backendActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(SongDashboard, {\n            panels: this.state.panels,\n            onMove: this.handleMove\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js"],"names":["React","Component","NavBar","Loading","SongDashboard","axios","App","constructor","state","backendActive","backendReady","songDifficulty","currScore","highScore","panels","songBank","orderedSongIndices","handleDifficulty","delta","newPanels","songToRemove","item","filter","song","title","artist","idx","indexOf","splice","push","length","last","setState","handleMove","up","first","handleReset","handleSongLoad","songIndices","Array","fill","map","_","index","shuffleIndices","i","indices","currIdx","randIdx","Math","floor","random","get","then","res","status","data","catch","error","request","response","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n    state = {\n        backendActive: false,\n        backendReady: false,\n        songDifficulty: 3,\n        currScore: 0,\n        highScore: 0,\n        panels: [],\n        songBank: [],\n        orderedSongIndices: [],\n    };\n\n    handleDifficulty = (delta) => {\n        const songDifficulty = this.state.songDifficulty + delta;\n        let newPanels = [...this.state.panels];\n        if (delta === -1) {\n            let songToRemove =\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty]\n                ];\n\n            let item = newPanels.filter(\n                (song) =>\n                    song.title === songToRemove.title &&\n                    song.artist === songToRemove.artist\n            )[0];\n\n            const idx = newPanels.indexOf(item);\n            newPanels.splice(idx, 1);\n        } else {\n            newPanels.push(\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty - 1]\n                ]\n            );\n            newPanels[newPanels.length - 2].last = false;\n        }\n        newPanels[newPanels.length - 1].last = true;\n        this.setState({ songDifficulty, panels: newPanels });\n    };\n\n    handleMove = (song, up) => {\n        let newPanels = [...this.state.panels];\n        const idx = newPanels.indexOf(song);\n\n        if (up) {\n            newPanels[idx - 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx - 1] };\n        } else {\n            newPanels[idx + 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx + 1] };\n        }\n\n        newPanels[0].first = true;\n        newPanels[1].first = false;\n        newPanels[newPanels.length - 1].last = true;\n        newPanels[newPanels.length - 2].last = false;\n\n        this.setState({ panels: newPanels });\n    };\n\n    handleReset = () => {\n        this.setState({\n            currScore: 0,\n            highScore: 0,\n            songDifficulty: 3,\n            panels: [],\n        });\n        this.handleSongLoad();\n    };\n\n    handleSongLoad = () => {\n        let songIndices = Array(100)\n            .fill()\n            .map((_, index) => index);\n        let orderedSongIndices = this.shuffleIndices(songIndices);\n\n        let panels = [];\n        for (let i = 0; i < this.state.songDifficulty; i++) {\n            panels.push(this.state.songBank[orderedSongIndices[i]]);\n            panels[i].first = i === 0;\n            panels[i].last = i === this.state.songDifficulty - 1;\n        }\n        this.setState({ orderedSongIndices, panels });\n    };\n\n    shuffleIndices = (indices) => {\n        let currIdx = indices.length,\n            randIdx;\n\n        while (currIdx !== 0) {\n            randIdx = Math.floor(Math.random() * currIdx);\n            currIdx--;\n\n            // And swap it with the current element.\n            [indices[currIdx], indices[randIdx]] = [\n                indices[randIdx],\n                indices[currIdx],\n            ];\n        }\n\n        return indices;\n    };\n\n    constructor() {\n        super();\n        axios\n            .get(\"http://localhost:8080/\")\n            .then((res) => {\n                if (res.status === 200) {\n                    this.setState({\n                        backendActive: true,\n                        backendReady: true,\n                        songBank: res.data,\n                    });\n                    this.handleSongLoad();\n                }\n            })\n            .catch((error) => {\n                if (error.request.status === 0) {\n                    // Backend server is not being detected\n                    this.setState({\n                        backendActive: false,\n                        backendReady: false,\n                    });\n                } else {\n                    // Backend server is active but is likely sending back 425, since web scraper is not finished\n                    if (error.response.status === 425) {\n                        this.setState({\n                            backendActive: true,\n                            backendReady: false,\n                        });\n                    } else {\n                        this.setState({\n                            backendActive: false,\n                            backendReady: false,\n                        });\n                    }\n                }\n            });\n    }\n\n    render() {\n        if (!this.state.backendActive || !this.state.backendReady) {\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                    />\n                    <main className=\"container\">\n                        <Loading backendActive={this.state.backendActive} />\n                    </main>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                    />\n                    <main className=\"container\">\n                        <SongDashboard\n                            panels={this.state.panels}\n                            onMove={this.handleMove}\n                        />\n                    </main>\n                </React.Fragment>\n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}