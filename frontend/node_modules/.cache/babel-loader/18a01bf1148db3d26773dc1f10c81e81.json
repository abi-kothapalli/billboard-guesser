{"ast":null,"code":"var _jsxFileName = \"/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport ls from \"local-storage\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      backendActive: false,\n      backendReady: false,\n      songDifficulty: 3,\n      currScore: 0,\n      highScore: 0,\n      panels: [],\n      songBank: [],\n      orderedSongIndices: [],\n      runStats: {\n        totalCorrect: 0,\n        totalGuesses: 0,\n        difficulty: []\n      },\n      allStats: {\n        totalCorrect: 0,\n        totalGuesses: 0,\n        difficulty: []\n      }\n    };\n\n    this.handleDifficulty = delta => {\n      const songDifficulty = this.state.songDifficulty + delta;\n      let newPanels = [...this.state.panels];\n\n      if (delta === -1) {\n        let songToRemove = this.state.songBank[this.state.orderedSongIndices[songDifficulty]];\n        let item = newPanels.filter(song => song.title === songToRemove.title && song.artist === songToRemove.artist)[0];\n        const idx = newPanels.indexOf(item);\n        newPanels.splice(idx, 1);\n      } else {\n        newPanels.push(this.state.songBank[this.state.orderedSongIndices[songDifficulty - 1]]);\n        newPanels[newPanels.length - 2].last = false;\n      }\n\n      newPanels[newPanels.length - 1].last = true;\n      this.setState({\n        songDifficulty,\n        panels: newPanels\n      });\n    };\n\n    this.handleMove = (song, up) => {\n      let newPanels = [...this.state.panels];\n      const idx = newPanels.indexOf(song);\n\n      if (up) {\n        newPanels[idx - 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx - 1]\n        };\n      } else {\n        newPanels[idx + 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx + 1]\n        };\n      }\n\n      newPanels[0].first = true;\n      newPanels[1].first = false;\n      newPanels[newPanels.length - 1].last = true;\n      newPanels[newPanels.length - 2].last = false;\n      this.setState({\n        panels: newPanels\n      });\n    };\n\n    this.handleGuess = () => {\n      let correct = true;\n      let currScore = this.state.currScore;\n      let highScore = this.state.highScore;\n\n      for (let i = 1; i < this.state.songDifficulty && correct; i++) {\n        if (this.state.panels[i - 1].rank > this.state.panels[i].rank) {\n          correct = false;\n        }\n      }\n\n      if (correct) {\n        $(\"#correctGuess\").modal(\"show\");\n        currScore++;\n      } else {\n        $(\"#incorrectGuess\").modal(\"show\");\n        currScore = 0;\n      }\n\n      if (currScore > highScore) {\n        highScore = currScore;\n      }\n\n      this.setState({\n        currScore,\n        highScore\n      });\n      this.handleSongLoad(this.state.songDifficulty);\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        currScore: 0,\n        highScore: 0,\n        songDifficulty: 3\n      });\n      this.handleSongLoad(3);\n    };\n\n    this.handleSongLoad = songDifficulty => {\n      let songIndices = Array(100).fill().map((_, index) => index);\n      let orderedSongIndices = this.shuffleIndices(songIndices);\n      let panels = [];\n\n      for (let i = 0; i < songDifficulty; i++) {\n        panels.push(this.state.songBank[orderedSongIndices[i]]);\n        panels[i].first = i === 0;\n        panels[i].last = i === songDifficulty - 1;\n      }\n\n      this.setState({\n        orderedSongIndices,\n        panels\n      });\n    };\n\n    this.shuffleIndices = indices => {\n      let currIdx = indices.length,\n          randIdx;\n\n      while (currIdx !== 0) {\n        randIdx = Math.floor(Math.random() * currIdx);\n        currIdx--; // And swap it with the current element.\n\n        [indices[currIdx], indices[randIdx]] = [indices[randIdx], indices[currIdx]];\n      }\n\n      return indices;\n    };\n\n    axios.get(\"http://localhost:8080/\").then(res => {\n      if (res.status === 200) {\n        this.setState({\n          backendActive: true,\n          backendReady: true,\n          songBank: res.data\n        });\n        this.handleSongLoad(3);\n      }\n    }).catch(error => {\n      if (error.request.status === 0) {\n        // Backend server is not being detected\n        this.setState({\n          backendActive: false,\n          backendReady: false\n        });\n      } else {\n        // Backend server is active but is likely sending back 425, since web scraper is not finished\n        if (error.response.status === 425) {\n          this.setState({\n            backendActive: true,\n            backendReady: false\n          });\n        } else {\n          this.setState({\n            backendActive: false,\n            backendReady: false\n          });\n        }\n      }\n    });\n  }\n\n  componentDidMount() {}\n\n  render() {\n    if (!this.state.backendActive || !this.state.backendReady) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(Loading, {\n            backendActive: this.state.backendActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(SongDashboard, {\n            panels: this.state.panels,\n            onMove: this.handleMove,\n            onGuess: this.handleGuess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js"],"names":["React","Component","axios","$","ls","NavBar","Loading","SongDashboard","App","constructor","state","backendActive","backendReady","songDifficulty","currScore","highScore","panels","songBank","orderedSongIndices","runStats","totalCorrect","totalGuesses","difficulty","allStats","handleDifficulty","delta","newPanels","songToRemove","item","filter","song","title","artist","idx","indexOf","splice","push","length","last","setState","handleMove","up","first","handleGuess","correct","i","rank","modal","handleSongLoad","handleReset","songIndices","Array","fill","map","_","index","shuffleIndices","indices","currIdx","randIdx","Math","floor","random","get","then","res","status","data","catch","error","request","response","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport ls from \"local-storage\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n    state = {\n        backendActive: false,\n        backendReady: false,\n        songDifficulty: 3,\n        currScore: 0,\n        highScore: 0,\n        panels: [],\n        songBank: [],\n        orderedSongIndices: [],\n        runStats: {\n            totalCorrect: 0,\n            totalGuesses: 0,\n            difficulty: [],\n        },\n        allStats: {\n            totalCorrect: 0,\n            totalGuesses: 0,\n            difficulty: [],\n        },\n    };\n\n    handleDifficulty = (delta) => {\n        const songDifficulty = this.state.songDifficulty + delta;\n        let newPanels = [...this.state.panels];\n        if (delta === -1) {\n            let songToRemove =\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty]\n                ];\n\n            let item = newPanels.filter(\n                (song) =>\n                    song.title === songToRemove.title &&\n                    song.artist === songToRemove.artist\n            )[0];\n\n            const idx = newPanels.indexOf(item);\n            newPanels.splice(idx, 1);\n        } else {\n            newPanels.push(\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty - 1]\n                ]\n            );\n            newPanels[newPanels.length - 2].last = false;\n        }\n        newPanels[newPanels.length - 1].last = true;\n        this.setState({ songDifficulty, panels: newPanels });\n    };\n\n    handleMove = (song, up) => {\n        let newPanels = [...this.state.panels];\n        const idx = newPanels.indexOf(song);\n\n        if (up) {\n            newPanels[idx - 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx - 1] };\n        } else {\n            newPanels[idx + 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx + 1] };\n        }\n\n        newPanels[0].first = true;\n        newPanels[1].first = false;\n        newPanels[newPanels.length - 1].last = true;\n        newPanels[newPanels.length - 2].last = false;\n\n        this.setState({ panels: newPanels });\n    };\n\n    handleGuess = () => {\n        let correct = true;\n        let currScore = this.state.currScore;\n        let highScore = this.state.highScore;\n\n        for (let i = 1; i < this.state.songDifficulty && correct; i++) {\n            if (this.state.panels[i - 1].rank > this.state.panels[i].rank) {\n                correct = false;\n            }\n        }\n\n        if (correct) {\n            $(\"#correctGuess\").modal(\"show\");\n            currScore++;\n        } else {\n            $(\"#incorrectGuess\").modal(\"show\");\n            currScore = 0;\n        }\n\n        if (currScore > highScore) {\n            highScore = currScore;\n        }\n\n        this.setState({ currScore, highScore });\n        this.handleSongLoad(this.state.songDifficulty);\n    };\n\n    handleReset = () => {\n        this.setState({ currScore: 0, highScore: 0, songDifficulty: 3 });\n        this.handleSongLoad(3);\n    };\n\n    handleSongLoad = (songDifficulty) => {\n        let songIndices = Array(100)\n            .fill()\n            .map((_, index) => index);\n        let orderedSongIndices = this.shuffleIndices(songIndices);\n\n        let panels = [];\n        for (let i = 0; i < songDifficulty; i++) {\n            panels.push(this.state.songBank[orderedSongIndices[i]]);\n            panels[i].first = i === 0;\n            panels[i].last = i === songDifficulty - 1;\n        }\n        this.setState({ orderedSongIndices, panels });\n    };\n\n    shuffleIndices = (indices) => {\n        let currIdx = indices.length,\n            randIdx;\n\n        while (currIdx !== 0) {\n            randIdx = Math.floor(Math.random() * currIdx);\n            currIdx--;\n\n            // And swap it with the current element.\n            [indices[currIdx], indices[randIdx]] = [\n                indices[randIdx],\n                indices[currIdx],\n            ];\n        }\n\n        return indices;\n    };\n\n    constructor() {\n        super();\n        axios\n            .get(\"http://localhost:8080/\")\n            .then((res) => {\n                if (res.status === 200) {\n                    this.setState({\n                        backendActive: true,\n                        backendReady: true,\n                        songBank: res.data,\n                    });\n                    this.handleSongLoad(3);\n                }\n            })\n            .catch((error) => {\n                if (error.request.status === 0) {\n                    // Backend server is not being detected\n                    this.setState({\n                        backendActive: false,\n                        backendReady: false,\n                    });\n                } else {\n                    // Backend server is active but is likely sending back 425, since web scraper is not finished\n                    if (error.response.status === 425) {\n                        this.setState({\n                            backendActive: true,\n                            backendReady: false,\n                        });\n                    } else {\n                        this.setState({\n                            backendActive: false,\n                            backendReady: false,\n                        });\n                    }\n                }\n            });\n    }\n\n    componentDidMount() {}\n\n    render() {\n        if (!this.state.backendActive || !this.state.backendReady) {\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                    />\n                    <main className=\"container\">\n                        <Loading backendActive={this.state.backendActive} />\n                    </main>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                    />\n                    <main className=\"container\">\n                        <SongDashboard\n                            panels={this.state.panels}\n                            onMove={this.handleMove}\n                            onGuess={this.handleGuess}\n                        />\n                    </main>\n                </React.Fragment>\n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}