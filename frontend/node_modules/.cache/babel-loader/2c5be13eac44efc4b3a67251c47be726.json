{"ast":null,"code":"var _jsxFileName = \"/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  /**\n   * @brief               Handler for when user wants to change the difficulty of the game\n   * @details             Changes in difficulty by either adding a song for increase in\n   *                      difficulty or removing a song for decrease in difficulty\n   *\n   * @param {int} delta   Change in difficulty, can either be +1 or -1\n   *\n   * @pre                 UI is displaying n songs to user, where n = songDifficulty\n   * @post                UI should display (n+delta) songs to user, and songDifficulty updated to (n+delta)\n   */\n\n  /**\n   * @brief                       Handles when user wants to reorder songs\n   * @details                     Moves a song up or down on UI based on user\n   *                              input, updates edge cases\n   *\n   * @param {dictionary} song     Song which is being moved\n   * @param {boolean} up          Whether song is being moved up or not (in\n   *                              which case it is moving down)\n   *\n   * @pre                         If n is the song being moved, the current order\n   *                              of songs on the UI may be a, b, ..., m, n, o, ..., y, z\n   * @post                        New order of songs will be a, b, ..., n, m, o, ..., y, z (if up)\n   *                              or a, b, ..., m, o, n, ..., y, z (if !up)\n   */\n\n  /**\n   * @brief       Handler for when user submits guess\n   * @details     Checks if order of songs is correct, then updates scores and\n   *              player stats as necessary, and finally loads next round of songs\n   *\n   * @pre         currScore, highScore, runStats, allStats, and UI is set\n   * @post        currScore = highScore = 0 if user incorrect, increment if correct.\n   *              runStats and allStats are updated with new user guess. Show user whether\n   *              they were correct or not, and load new songs into UI.ÃŸ\n   */\n\n  /**\n   *\n   *\n   */\n  constructor() {\n    super();\n    this.state = {\n      backendActive: false,\n      // Is backend running\n      backendReady: false,\n      // Is backend running but not finished webscraping\n      songDifficulty: 3,\n      // Number of songs to display per user guess\n      currScore: 0,\n      // Number of correct answers in a row\n      highScore: parseInt(localStorage.getItem(\"highScore\")) || 0,\n      // Gets high score from local storage so that the score persists across runs\n      panels: [],\n      // Contains info on each song so that they can be rendered on UI\n      oldPanels: [],\n      // Contains previous set of panels so that user can still see correct answer once they submit guess\n      songBank: [],\n      // Contains info on all 100 songs on Hot 100 in order from rank 1 to rank 100\n      orderedSongIndices: [],\n      // Shuffles song indices so that user can increase or decrease difficulty and thus add or remove songs from UI\n      runStats: {\n        // Stores user statistics for a given run\n        totalCorrect: 0,\n        totalGuesses: 0,\n        difficultySum: 0\n      },\n      allStats: JSON.parse(localStorage.getItem(\"allStats\")) || {\n        // Gets all time player statistics from local storage so that\n        // the stats persis and can be updated across runs\n        totalCorrect: 0,\n        totalGuesses: 0,\n        difficultySum: 0\n      }\n    };\n\n    this.handleDifficulty = delta => {\n      // Copy songDifficulty and panels to local variables\n      const songDifficulty = this.state.songDifficulty + delta;\n      let newPanels = [...this.state.panels]; // Handle whether delta === -1 or delta === 1\n\n      if (delta === -1) {\n        // Remove the n-th song from the UI\n        // This implementation makes it so that if there are n songs, user\n        // adds (n+1)th song, reorders songs, and then removes a song, it\n        // will always remove the same (n+1)th song, not simply the last song in the UI.\n        // Thus the user cannot \"choose\" what song to remove, so it is resistant to cheating.\n        let songToRemove = this.state.songBank[this.state.orderedSongIndices[songDifficulty]]; // Find the item that needs to be removed in the newPanels array\n\n        let item = newPanels.filter(song => song.title === songToRemove.title && song.artist === songToRemove.artist)[0]; // Remove the song from the newPanels arr\n\n        const idx = newPanels.indexOf(item);\n        newPanels.splice(idx, 1);\n      } else {\n        // Add a new song to the newPanels arr\n        newPanels.push(this.state.songBank[this.state.orderedSongIndices[songDifficulty - 1]]); // Previous ending element is no longer the last element\n\n        newPanels[newPanels.length - 2].last = false;\n      } // Ensure that final element has last = true after all changes\n\n\n      newPanels[newPanels.length - 1].last = true; // Update state\n\n      this.setState({\n        songDifficulty,\n        panels: newPanels\n      });\n    };\n\n    this.handleMove = (song, up) => {\n      // Copy panels to local variable\n      let newPanels = [...this.state.panels];\n      const idx = newPanels.indexOf(song); // Reorder songs based on whether the song is being moved up or down\n\n      if (up) {\n        newPanels[idx - 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx - 1]\n        };\n      } else {\n        newPanels[idx + 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx + 1]\n        };\n      } // Update first and last for the edge cases\n\n\n      newPanels[0].first = true;\n      newPanels[1].first = false;\n      newPanels[newPanels.length - 1].last = true;\n      newPanels[newPanels.length - 2].last = false; // Update state\n\n      this.setState({\n        panels: newPanels\n      });\n    };\n\n    this.handleGuess = () => {\n      let correct = true; // Copy state vars to local vars\n\n      let currScore = this.state.currScore;\n      let highScore = this.state.highScore;\n      let runStats = { ...this.state.runStats\n      };\n      let allStats = { ...this.state.allStats\n      }; // Update runStats and allStats\n\n      runStats.totalGuesses++;\n      allStats.totalGuesses++;\n      runStats.difficultySum += this.state.songDifficulty;\n      allStats.difficultySum += this.state.songDifficulty; // Loop through songs to check if user's guess was correct\n\n      for (let i = 1; i < this.state.songDifficulty && correct; i++) {\n        if (parseInt(this.state.panels[i - 1].rank) > parseInt(this.state.panels[i].rank)) {\n          correct = false;\n        }\n      } // Update currScore, runStats, and allStats based on if user was correct\n\n\n      if (correct) {\n        $(\"#correctGuess\").modal(\"show\");\n        currScore++;\n        runStats.totalCorrect++;\n        allStats.totalCorrect++;\n      } else {\n        $(\"#incorrectGuess\").modal(\"show\");\n        currScore = 0;\n      } // Update if user has new highScore\n\n\n      if (currScore > highScore) {\n        highScore = currScore;\n      } // Update state\n\n\n      this.setState({\n        currScore,\n        highScore,\n        runStats,\n        allStats\n      }); // Store allStats and highScore to local storage so that the data persists across runs\n\n      localStorage.setItem(\"allStats\", JSON.stringify(allStats));\n      localStorage.setItem(\"highScore\", highScore); // Load new songs into UI\n\n      this.handleSongLoad(this.state.songDifficulty);\n    };\n\n    this.handleReset = () => {\n      if (!this.state.backendActive || !this.state.backendReady) {\n        return;\n      }\n\n      this.setState({\n        currScore: 0,\n        highScore: 0,\n        songDifficulty: 3,\n        allStats: {\n          totalCorrect: 0,\n          totalGuesses: 0,\n          difficultySum: 0\n        },\n        runStats: {\n          totalCorrect: 0,\n          totalGuesses: 0,\n          difficultySum: 0\n        }\n      });\n      localStorage.removeItem(\"allStats\");\n      localStorage.removeItem(\"highScore\");\n      this.handleSongLoad(3);\n    };\n\n    this.handleSongLoad = songDifficulty => {\n      let songIndices = Array(100).fill().map((_, index) => index);\n      let orderedSongIndices = this.shuffleIndices(songIndices);\n      const oldPanels = this.state.panels;\n      let panels = [];\n\n      for (let i = 0; i < songDifficulty; i++) {\n        panels.push(this.state.songBank[orderedSongIndices[i]]);\n        panels[i].first = i === 0;\n        panels[i].last = i === songDifficulty - 1;\n      }\n\n      this.setState({\n        orderedSongIndices,\n        panels,\n        oldPanels\n      });\n    };\n\n    this.shuffleIndices = indices => {\n      let currIdx = indices.length,\n          randIdx;\n\n      while (currIdx !== 0) {\n        randIdx = Math.floor(Math.random() * currIdx);\n        currIdx--; // And swap it with the current element.\n\n        [indices[currIdx], indices[randIdx]] = [indices[randIdx], indices[currIdx]];\n      }\n\n      return indices;\n    };\n\n    axios.get(\"http://localhost:8080/\").then(res => {\n      if (res.status === 200) {\n        this.setState({\n          backendActive: true,\n          backendReady: true,\n          songBank: res.data\n        });\n        this.handleSongLoad(3);\n        document.getElementById(\"infoBtn\").click();\n      }\n    }).catch(error => {\n      if (error.request.status === 0) {\n        // Backend server is not being detected\n        this.setState({\n          backendActive: false,\n          backendReady: false\n        });\n      } else {\n        // Backend server is active but is likely sending back 425, since web scraper is not finished\n        if (error.response.status === 425) {\n          this.setState({\n            backendActive: true,\n            backendReady: false\n          });\n        } else {\n          this.setState({\n            backendActive: false,\n            backendReady: false\n          });\n        }\n      }\n    });\n  }\n\n  render() {\n    if (!this.state.backendActive || !this.state.backendReady) {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset,\n          runStats: this.state.runStats,\n          allStats: this.state.allStats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(Loading, {\n            backendActive: this.state.backendActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset,\n          runStats: this.state.runStats,\n          allStats: this.state.allStats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(SongDashboard, {\n            panels: this.state.panels,\n            oldPanels: this.state.oldPanels,\n            onMove: this.handleMove,\n            onGuess: this.handleGuess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js"],"names":["React","Component","axios","$","NavBar","Loading","SongDashboard","App","constructor","state","backendActive","backendReady","songDifficulty","currScore","highScore","parseInt","localStorage","getItem","panels","oldPanels","songBank","orderedSongIndices","runStats","totalCorrect","totalGuesses","difficultySum","allStats","JSON","parse","handleDifficulty","delta","newPanels","songToRemove","item","filter","song","title","artist","idx","indexOf","splice","push","length","last","setState","handleMove","up","first","handleGuess","correct","i","rank","modal","setItem","stringify","handleSongLoad","handleReset","removeItem","songIndices","Array","fill","map","_","index","shuffleIndices","indices","currIdx","randIdx","Math","floor","random","get","then","res","status","data","document","getElementById","click","catch","error","request","response","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n    state = {\n        backendActive: false, // Is backend running\n        backendReady: false, // Is backend running but not finished webscraping\n        songDifficulty: 3, // Number of songs to display per user guess\n        currScore: 0, // Number of correct answers in a row\n        highScore: parseInt(localStorage.getItem(\"highScore\")) || 0, // Gets high score from local storage so that the score persists across runs\n        panels: [], // Contains info on each song so that they can be rendered on UI\n        oldPanels: [], // Contains previous set of panels so that user can still see correct answer once they submit guess\n        songBank: [], // Contains info on all 100 songs on Hot 100 in order from rank 1 to rank 100\n        orderedSongIndices: [], // Shuffles song indices so that user can increase or decrease difficulty and thus add or remove songs from UI\n        runStats: {\n            // Stores user statistics for a given run\n            totalCorrect: 0,\n            totalGuesses: 0,\n            difficultySum: 0,\n        },\n        allStats: JSON.parse(localStorage.getItem(\"allStats\")) || {\n            // Gets all time player statistics from local storage so that\n            // the stats persis and can be updated across runs\n            totalCorrect: 0,\n            totalGuesses: 0,\n            difficultySum: 0,\n        },\n    };\n\n    /**\n     * @brief               Handler for when user wants to change the difficulty of the game\n     * @details             Changes in difficulty by either adding a song for increase in\n     *                      difficulty or removing a song for decrease in difficulty\n     *\n     * @param {int} delta   Change in difficulty, can either be +1 or -1\n     *\n     * @pre                 UI is displaying n songs to user, where n = songDifficulty\n     * @post                UI should display (n+delta) songs to user, and songDifficulty updated to (n+delta)\n     */\n    handleDifficulty = (delta) => {\n        // Copy songDifficulty and panels to local variables\n        const songDifficulty = this.state.songDifficulty + delta;\n        let newPanels = [...this.state.panels];\n\n        // Handle whether delta === -1 or delta === 1\n        if (delta === -1) {\n            // Remove the n-th song from the UI\n\n            // This implementation makes it so that if there are n songs, user\n            // adds (n+1)th song, reorders songs, and then removes a song, it\n            // will always remove the same (n+1)th song, not simply the last song in the UI.\n            // Thus the user cannot \"choose\" what song to remove, so it is resistant to cheating.\n\n            let songToRemove =\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty]\n                ];\n\n            // Find the item that needs to be removed in the newPanels array\n            let item = newPanels.filter(\n                (song) =>\n                    song.title === songToRemove.title &&\n                    song.artist === songToRemove.artist\n            )[0];\n\n            // Remove the song from the newPanels arr\n            const idx = newPanels.indexOf(item);\n            newPanels.splice(idx, 1);\n        } else {\n            // Add a new song to the newPanels arr\n            newPanels.push(\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty - 1]\n                ]\n            );\n            // Previous ending element is no longer the last element\n            newPanels[newPanels.length - 2].last = false;\n        }\n        // Ensure that final element has last = true after all changes\n        newPanels[newPanels.length - 1].last = true;\n        // Update state\n        this.setState({ songDifficulty, panels: newPanels });\n    };\n\n    /**\n     * @brief                       Handles when user wants to reorder songs\n     * @details                     Moves a song up or down on UI based on user\n     *                              input, updates edge cases\n     *\n     * @param {dictionary} song     Song which is being moved\n     * @param {boolean} up          Whether song is being moved up or not (in\n     *                              which case it is moving down)\n     *\n     * @pre                         If n is the song being moved, the current order\n     *                              of songs on the UI may be a, b, ..., m, n, o, ..., y, z\n     * @post                        New order of songs will be a, b, ..., n, m, o, ..., y, z (if up)\n     *                              or a, b, ..., m, o, n, ..., y, z (if !up)\n     */\n    handleMove = (song, up) => {\n        // Copy panels to local variable\n        let newPanels = [...this.state.panels];\n        const idx = newPanels.indexOf(song);\n\n        // Reorder songs based on whether the song is being moved up or down\n        if (up) {\n            newPanels[idx - 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx - 1] };\n        } else {\n            newPanels[idx + 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx + 1] };\n        }\n\n        // Update first and last for the edge cases\n        newPanels[0].first = true;\n        newPanels[1].first = false;\n        newPanels[newPanels.length - 1].last = true;\n        newPanels[newPanels.length - 2].last = false;\n\n        // Update state\n        this.setState({ panels: newPanels });\n    };\n\n    /**\n     * @brief       Handler for when user submits guess\n     * @details     Checks if order of songs is correct, then updates scores and\n     *              player stats as necessary, and finally loads next round of songs\n     *\n     * @pre         currScore, highScore, runStats, allStats, and UI is set\n     * @post        currScore = highScore = 0 if user incorrect, increment if correct.\n     *              runStats and allStats are updated with new user guess. Show user whether\n     *              they were correct or not, and load new songs into UI.ÃŸ\n     */\n    handleGuess = () => {\n        let correct = true;\n\n        // Copy state vars to local vars\n        let currScore = this.state.currScore;\n        let highScore = this.state.highScore;\n\n        let runStats = { ...this.state.runStats };\n        let allStats = { ...this.state.allStats };\n\n        // Update runStats and allStats\n        runStats.totalGuesses++;\n        allStats.totalGuesses++;\n        runStats.difficultySum += this.state.songDifficulty;\n        allStats.difficultySum += this.state.songDifficulty;\n\n        // Loop through songs to check if user's guess was correct\n        for (let i = 1; i < this.state.songDifficulty && correct; i++) {\n            if (\n                parseInt(this.state.panels[i - 1].rank) >\n                parseInt(this.state.panels[i].rank)\n            ) {\n                correct = false;\n            }\n        }\n\n        // Update currScore, runStats, and allStats based on if user was correct\n        if (correct) {\n            $(\"#correctGuess\").modal(\"show\");\n            currScore++;\n            runStats.totalCorrect++;\n            allStats.totalCorrect++;\n        } else {\n            $(\"#incorrectGuess\").modal(\"show\");\n            currScore = 0;\n        }\n\n        // Update if user has new highScore\n        if (currScore > highScore) {\n            highScore = currScore;\n        }\n\n        // Update state\n        this.setState({ currScore, highScore, runStats, allStats });\n\n        // Store allStats and highScore to local storage so that the data persists across runs\n        localStorage.setItem(\"allStats\", JSON.stringify(allStats));\n        localStorage.setItem(\"highScore\", highScore);\n\n        // Load new songs into UI\n        this.handleSongLoad(this.state.songDifficulty);\n    };\n\n    /**\n     *\n     *\n     */\n    handleReset = () => {\n        if (!this.state.backendActive || !this.state.backendReady) {\n            return;\n        }\n\n        this.setState({\n            currScore: 0,\n            highScore: 0,\n            songDifficulty: 3,\n            allStats: {\n                totalCorrect: 0,\n                totalGuesses: 0,\n                difficultySum: 0,\n            },\n            runStats: {\n                totalCorrect: 0,\n                totalGuesses: 0,\n                difficultySum: 0,\n            },\n        });\n\n        localStorage.removeItem(\"allStats\");\n        localStorage.removeItem(\"highScore\");\n        this.handleSongLoad(3);\n    };\n\n    handleSongLoad = (songDifficulty) => {\n        let songIndices = Array(100)\n            .fill()\n            .map((_, index) => index);\n        let orderedSongIndices = this.shuffleIndices(songIndices);\n\n        const oldPanels = this.state.panels;\n\n        let panels = [];\n        for (let i = 0; i < songDifficulty; i++) {\n            panels.push(this.state.songBank[orderedSongIndices[i]]);\n            panels[i].first = i === 0;\n            panels[i].last = i === songDifficulty - 1;\n        }\n        this.setState({ orderedSongIndices, panels, oldPanels });\n    };\n\n    shuffleIndices = (indices) => {\n        let currIdx = indices.length,\n            randIdx;\n\n        while (currIdx !== 0) {\n            randIdx = Math.floor(Math.random() * currIdx);\n            currIdx--;\n\n            // And swap it with the current element.\n            [indices[currIdx], indices[randIdx]] = [\n                indices[randIdx],\n                indices[currIdx],\n            ];\n        }\n\n        return indices;\n    };\n\n    constructor() {\n        super();\n        axios\n            .get(\"http://localhost:8080/\")\n            .then((res) => {\n                if (res.status === 200) {\n                    this.setState({\n                        backendActive: true,\n                        backendReady: true,\n                        songBank: res.data,\n                    });\n                    this.handleSongLoad(3);\n                    document.getElementById(\"infoBtn\").click();\n                }\n            })\n            .catch((error) => {\n                if (error.request.status === 0) {\n                    // Backend server is not being detected\n                    this.setState({\n                        backendActive: false,\n                        backendReady: false,\n                    });\n                } else {\n                    // Backend server is active but is likely sending back 425, since web scraper is not finished\n                    if (error.response.status === 425) {\n                        this.setState({\n                            backendActive: true,\n                            backendReady: false,\n                        });\n                    } else {\n                        this.setState({\n                            backendActive: false,\n                            backendReady: false,\n                        });\n                    }\n                }\n            });\n    }\n\n    render() {\n        if (!this.state.backendActive || !this.state.backendReady) {\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                        runStats={this.state.runStats}\n                        allStats={this.state.allStats}\n                    />\n                    <main className=\"container\">\n                        <Loading backendActive={this.state.backendActive} />\n                    </main>\n                </React.Fragment>\n            );\n        } else {\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                        runStats={this.state.runStats}\n                        allStats={this.state.allStats}\n                    />\n                    <main className=\"container\">\n                        <SongDashboard\n                            panels={this.state.panels}\n                            oldPanels={this.state.oldPanels}\n                            onMove={this.handleMove}\n                            onGuess={this.handleGuess}\n                        />\n                    </main>\n                </React.Fragment>\n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}