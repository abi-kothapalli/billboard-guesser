{"ast":null,"code":"var _jsxFileName = \"/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  /**\n   * @brief               Handler for when user wants to change the difficulty of the game\n   * @details             Changes in difficulty by either adding a song for increase in\n   *                      difficulty or removing a song for decrease in difficulty\n   *\n   * @param {int} delta   Change in difficulty, can either be +1 or -1\n   *\n   * @pre                 UI is displaying n songs to user, where n = songDifficulty\n   * @post                UI should display (n+delta) songs to user, and songDifficulty updated to (n+delta)\n   */\n\n  /**\n   * @brief                       Handles when user wants to reorder songs\n   * @details                     Moves a song up or down on UI based on user\n   *                              input, updates edge cases\n   *\n   * @param {dictionary} song     Song which is being moved\n   * @param {boolean} up          Whether song is being moved up or not (in\n   *                              which case it is moving down)\n   *\n   * @pre                         If n is the song being moved, the current order\n   *                              of songs on the UI may be a, b, ..., m, n, o, ..., y, z\n   * @post                        New order of songs will be a, b, ..., n, m, o, ..., y, z (if up)\n   *                              or a, b, ..., m, o, n, ..., y, z (if !up)\n   */\n\n  /**\n   * @brief       Handler for when user submits guess\n   * @details     Checks if order of songs is correct, then updates scores and\n   *              player stats as necessary, and finally loads next round of songs\n   *\n   * @pre         currScore, highScore, runStats, allStats, and UI is set\n   * @post        currScore = highScore = 0 if user incorrect, increment if correct.\n   *              runStats and allStats are updated with new user guess. Show user whether\n   *              they were correct or not, and load new songs into UI.ÃŸ\n   */\n\n  /**\n   * @brief       Handler for when user wants to reset game\n   * @details     Resets all scores and player stats to clean slate, and resets data in local storage.\n   *              Also resets the current songs in the UI and changes songDifficulty back to 3 (default).\n   *\n   * @pre         currScore, highScore, runStats, and allStats contain updated numbers on players gameplay.\n   *              There are also (songDifficulty) songs loaded into the UI\n   * @post        currScore = highScore = 0, runStats and allStats are reset,\n   *              songDifficulty = 3, and new songs loaded into UI.\n   */\n\n  /**\n   * @brief                       Loads songs into the UI\n   * @details                     Shuffles songs in songBank and loads the first\n   *                              (songDifficulty) songs into the UI\n   *\n   * @param {int} songDifficulty  Number of songs to be loaded into the UI\n   *\n   * @pre                         songBank has all songs loaded into it. UI may or\n   *                              may not already have songs in it\n   * @post                        A random (songDifficulty) number of songs will\n   *                              be loaded into the UI\n   */\n\n  /**\n   * @brief                   Shuffles an array\n   * @details                 Shuffles an array of indices into a random order\n   *\n   * @param {int[]} indices   Array of indices to songs in songBank\n   * @returns                 Shuffled array whose contents are identical to indices param\n   */\n\n  /**\n   * @brief       Constructor of App component\n   * @details     Function that is called when the webpage is first loaded. Attempts to\n   *              communicate with backend and handles response as appropriate.\n   *\n   * @pre         Webpage is not yet loaded\n   * @post        Frontend has attempted to connect with backend and handles response as appropriate\n   */\n  constructor() {\n    super();\n    this.state = {\n      backendActive: false,\n      // Is backend running\n      backendReady: false,\n      // Is backend running but not finished webscraping\n      songDifficulty: 3,\n      // Number of songs to display per user guess\n      currScore: 0,\n      // Number of correct answers in a row\n      // Gets high score from local storage so that the score persists across runs\n      highScore: parseInt(localStorage.getItem(\"highScore\")) || 0,\n      // Contains info on each song so that they can be rendered on UI\n      panels: [{\n        rank: 1,\n        title: \"Sample\",\n        artist: \"Sample\",\n        picture: \"https://example.com/\",\n        first: true,\n        last: false\n      }],\n      oldPanels: [],\n      // Contains previous set of panels so that user can still see correct answer once they submit guess\n      // Contains info on all 100 songs on Hot 100 in order from rank 1 to rank 100\n      songBank: [{\n        rank: 1,\n        title: \"Sample\",\n        artist: \"Sample\",\n        picture: \"https://example.com/\"\n      }],\n      orderedSongIndices: [],\n      // Shuffles song indices so that user can increase or decrease difficulty and thus add or remove songs from UI\n      // Stores user statistics for a given run\n      runStats: {\n        totalCorrect: 0,\n        totalGuesses: 0,\n        difficultySum: 0\n      },\n      // Gets all time player statistics from local storage so that the stats persis and can be updated across runs\n      allStats: JSON.parse(localStorage.getItem(\"allStats\")) || {\n        totalCorrect: 0,\n        totalGuesses: 0,\n        difficultySum: 0\n      }\n    };\n\n    this.handleDifficulty = delta => {\n      // Copy songDifficulty and panels to local variables\n      const songDifficulty = this.state.songDifficulty + delta;\n      let newPanels = [...this.state.panels]; // Handle whether delta === -1 or delta === 1\n\n      if (delta === -1) {\n        // Remove the n-th song from the UI\n        // This implementation makes it so that if there are n songs, user\n        // adds (n+1)th song, reorders songs, and then removes a song, it\n        // will always remove the same (n+1)th song, not simply the last song in the UI.\n        // Thus the user cannot \"choose\" what song to remove, so it is resistant to cheating.\n        let songToRemove = this.state.songBank[this.state.orderedSongIndices[songDifficulty]]; // Find the item that needs to be removed in the newPanels array\n\n        let item = newPanels.filter(song => song.title === songToRemove.title && song.artist === songToRemove.artist)[0]; // Remove the song from the newPanels arr\n\n        const idx = newPanels.indexOf(item);\n        newPanels.splice(idx, 1);\n      } else {\n        // Add a new song to the newPanels arr\n        newPanels.push(this.state.songBank[this.state.orderedSongIndices[songDifficulty - 1]]); // Previous ending element is no longer the last element\n\n        newPanels[newPanels.length - 2].last = false;\n      } // Ensure that final element has last = true after all changes\n\n\n      newPanels[newPanels.length - 1].last = true; // Update state\n\n      this.setState({\n        songDifficulty,\n        panels: newPanels\n      });\n    };\n\n    this.handleMove = (song, up) => {\n      // Copy panels to local variable\n      let newPanels = [...this.state.panels];\n      const idx = newPanels.indexOf(song); // Reorder songs based on whether the song is being moved up or down\n\n      if (up) {\n        newPanels[idx - 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx - 1]\n        };\n      } else {\n        newPanels[idx + 1] = { ...song\n        };\n        newPanels[idx] = { ...this.state.panels[idx + 1]\n        };\n      } // Update first and last for the edge cases\n\n\n      newPanels[0].first = true;\n      newPanels[1].first = false;\n      newPanels[newPanels.length - 1].last = true;\n      newPanels[newPanels.length - 2].last = false; // Update state\n\n      this.setState({\n        panels: newPanels\n      });\n    };\n\n    this.handleGuess = () => {\n      let correct = true; // Copy state vars to local vars\n\n      let currScore = this.state.currScore;\n      let highScore = this.state.highScore;\n      let runStats = { ...this.state.runStats\n      };\n      let allStats = { ...this.state.allStats\n      }; // Update runStats and allStats\n\n      runStats.totalGuesses++;\n      allStats.totalGuesses++;\n      runStats.difficultySum += this.state.songDifficulty;\n      allStats.difficultySum += this.state.songDifficulty; // Loop through songs to check if user's guess was correct\n\n      for (let i = 1; i < this.state.songDifficulty && correct; i++) {\n        if (parseInt(this.state.panels[i - 1].rank) > parseInt(this.state.panels[i].rank)) {\n          correct = false;\n        }\n      } // Update currScore, runStats, and allStats based on if user was correct\n\n\n      if (correct) {\n        $(\"#correctGuess\").modal(\"show\");\n        currScore++;\n        runStats.totalCorrect++;\n        allStats.totalCorrect++;\n      } else {\n        $(\"#incorrectGuess\").modal(\"show\");\n        currScore = 0;\n      } // Update if user has new highScore\n\n\n      if (currScore > highScore) {\n        highScore = currScore;\n      } // Update state\n\n\n      this.setState({\n        currScore,\n        highScore,\n        runStats,\n        allStats\n      }); // Store allStats and highScore to local storage so that the data persists across runs\n\n      localStorage.setItem(\"allStats\", JSON.stringify(allStats));\n      localStorage.setItem(\"highScore\", highScore); // Load new songs into UI\n\n      this.handleSongLoad(this.state.songDifficulty);\n    };\n\n    this.handleReset = () => {\n      // Prevents user from resetting app while backend is not completely ready, as this would cause the app to crash\n      if (!this.state.backendActive || !this.state.backendReady) {\n        return;\n      } // Reset all specified variables\n\n\n      this.setState({\n        currScore: 0,\n        highScore: 0,\n        songDifficulty: 3,\n        allStats: {\n          totalCorrect: 0,\n          totalGuesses: 0,\n          difficultySum: 0\n        },\n        runStats: {\n          totalCorrect: 0,\n          totalGuesses: 0,\n          difficultySum: 0\n        }\n      }); // Clear data from local storage\n\n      localStorage.removeItem(\"allStats\");\n      localStorage.removeItem(\"highScore\"); // Load new songs into the UI\n\n      this.handleSongLoad(3);\n    };\n\n    this.handleSongLoad = songDifficulty => {\n      // Get array [0, 1, 2, ..., 99] where each num is an index to a song in songBank\n      let songIndices = Array(100).fill().map((_, index) => index); // Randomly shuffle the array of indices\n\n      let orderedSongIndices = this.shuffleIndices(songIndices); // Copy songs into oldPanels before they are replaced\n\n      const oldPanels = [...this.state.panels]; // Add the first (songDifficulty) number of songs into panels\n\n      let panels = [];\n\n      for (let i = 0; i < songDifficulty; i++) {\n        panels.push(this.state.songBank[orderedSongIndices[i]]);\n        panels[i].first = i === 0;\n        panels[i].last = i === songDifficulty - 1;\n      } // Update the state to load the new songs into the UI\n\n\n      this.setState({\n        orderedSongIndices,\n        panels,\n        oldPanels\n      });\n    };\n\n    this.shuffleIndices = indices => {\n      let currIdx = indices.length,\n          randIdx; // Loop that randomly keeps swapping elements to currIdx, effectively shuffling the array\n\n      while (currIdx !== 0) {\n        randIdx = Math.floor(Math.random() * currIdx);\n        currIdx--;\n        [indices[currIdx], indices[randIdx]] = [indices[randIdx], indices[currIdx]];\n      } // Return the result of the shuffle\n\n\n      return indices;\n    };\n\n    axios.get(\"http://localhost:8080/\").then(res => {\n      // Response was received successfully with status 200 (\"OK\")\n      if (res.status === 200) {\n        // Update state as appropriate and include data received from backend\n        this.setState({\n          backendActive: true,\n          backendReady: true,\n          songBank: res.data\n        }); // Load songs into UI\n\n        this.handleSongLoad(3); // Display instruction menu to user on startup\n\n        document.getElementById(\"infoBtn\").click();\n      }\n    }).catch(error => {\n      if (error.request.status === 0) {\n        // Backend server is not being detected, i.e. it is not running\n        this.setState({\n          backendActive: false,\n          backendReady: false\n        });\n      } else {\n        // Backend server is active but is likely sending back 425, since web scraper is not finished\n        if (error.response.status === 425) {\n          this.setState({\n            backendActive: true,\n            backendReady: false\n          });\n        } else {\n          this.setState({\n            backendActive: false,\n            backendReady: false\n          });\n        }\n      }\n    });\n  }\n  /**\n   * @brief       Render function for App component\n   * @detail      Render function for App component that loads in subcomponents\n   *              depending on the state of the backend\n   *\n   * @returns     App component\n   */\n\n\n  render() {\n    if (!this.state.backendActive || !this.state.backendReady) {\n      // If there is any sort of issue with the backend, show the loading screen\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(Loading, {\n            backendActive: this.state.backendActive\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 17\n      }, this);\n    } else {\n      // There is no issue with the backend, so start game normally\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          songDifficulty: this.state.songDifficulty,\n          onDifficulty: this.handleDifficulty,\n          currScore: this.state.currScore,\n          highScore: this.state.highScore,\n          onReset: this.handleReset,\n          runStats: this.state.runStats,\n          allStats: this.state.allStats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(SongDashboard, {\n            panels: this.state.panels,\n            oldPanels: this.state.oldPanels,\n            onMove: this.handleMove,\n            onGuess: this.handleGuess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/akothapalli/Documents/ChangePlusPlus/change-coding-challenge-2021-abi-kothapalli/frontend/src/App.js"],"names":["React","Component","axios","$","NavBar","Loading","SongDashboard","App","constructor","state","backendActive","backendReady","songDifficulty","currScore","highScore","parseInt","localStorage","getItem","panels","rank","title","artist","picture","first","last","oldPanels","songBank","orderedSongIndices","runStats","totalCorrect","totalGuesses","difficultySum","allStats","JSON","parse","handleDifficulty","delta","newPanels","songToRemove","item","filter","song","idx","indexOf","splice","push","length","setState","handleMove","up","handleGuess","correct","i","modal","setItem","stringify","handleSongLoad","handleReset","removeItem","songIndices","Array","fill","map","_","index","shuffleIndices","indices","currIdx","randIdx","Math","floor","random","get","then","res","status","data","document","getElementById","click","catch","error","request","response","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport NavBar from \"./components/navbar\";\nimport Loading from \"./components/loading\";\nimport SongDashboard from \"./components/songDashboard\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n    state = {\n        backendActive: false, // Is backend running\n        backendReady: false, // Is backend running but not finished webscraping\n        songDifficulty: 3, // Number of songs to display per user guess\n        currScore: 0, // Number of correct answers in a row\n\n        // Gets high score from local storage so that the score persists across runs\n        highScore: parseInt(localStorage.getItem(\"highScore\")) || 0,\n\n        // Contains info on each song so that they can be rendered on UI\n        panels: [\n            {\n                rank: 1,\n                title: \"Sample\",\n                artist: \"Sample\",\n                picture: \"https://example.com/\",\n                first: true,\n                last: false,\n            },\n        ],\n        oldPanels: [], // Contains previous set of panels so that user can still see correct answer once they submit guess\n\n        // Contains info on all 100 songs on Hot 100 in order from rank 1 to rank 100\n        songBank: [\n            {\n                rank: 1,\n                title: \"Sample\",\n                artist: \"Sample\",\n                picture: \"https://example.com/\",\n            },\n        ],\n        orderedSongIndices: [], // Shuffles song indices so that user can increase or decrease difficulty and thus add or remove songs from UI\n\n        // Stores user statistics for a given run\n        runStats: {\n            totalCorrect: 0,\n            totalGuesses: 0,\n            difficultySum: 0,\n        },\n\n        // Gets all time player statistics from local storage so that the stats persis and can be updated across runs\n        allStats: JSON.parse(localStorage.getItem(\"allStats\")) || {\n            totalCorrect: 0,\n            totalGuesses: 0,\n            difficultySum: 0,\n        },\n    };\n\n    /**\n     * @brief               Handler for when user wants to change the difficulty of the game\n     * @details             Changes in difficulty by either adding a song for increase in\n     *                      difficulty or removing a song for decrease in difficulty\n     *\n     * @param {int} delta   Change in difficulty, can either be +1 or -1\n     *\n     * @pre                 UI is displaying n songs to user, where n = songDifficulty\n     * @post                UI should display (n+delta) songs to user, and songDifficulty updated to (n+delta)\n     */\n    handleDifficulty = (delta) => {\n        // Copy songDifficulty and panels to local variables\n        const songDifficulty = this.state.songDifficulty + delta;\n        let newPanels = [...this.state.panels];\n\n        // Handle whether delta === -1 or delta === 1\n        if (delta === -1) {\n            // Remove the n-th song from the UI\n\n            // This implementation makes it so that if there are n songs, user\n            // adds (n+1)th song, reorders songs, and then removes a song, it\n            // will always remove the same (n+1)th song, not simply the last song in the UI.\n            // Thus the user cannot \"choose\" what song to remove, so it is resistant to cheating.\n\n            let songToRemove =\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty]\n                ];\n\n            // Find the item that needs to be removed in the newPanels array\n            let item = newPanels.filter(\n                (song) =>\n                    song.title === songToRemove.title &&\n                    song.artist === songToRemove.artist\n            )[0];\n\n            // Remove the song from the newPanels arr\n            const idx = newPanels.indexOf(item);\n            newPanels.splice(idx, 1);\n        } else {\n            // Add a new song to the newPanels arr\n            newPanels.push(\n                this.state.songBank[\n                    this.state.orderedSongIndices[songDifficulty - 1]\n                ]\n            );\n            // Previous ending element is no longer the last element\n            newPanels[newPanels.length - 2].last = false;\n        }\n        // Ensure that final element has last = true after all changes\n        newPanels[newPanels.length - 1].last = true;\n        // Update state\n        this.setState({ songDifficulty, panels: newPanels });\n    };\n\n    /**\n     * @brief                       Handles when user wants to reorder songs\n     * @details                     Moves a song up or down on UI based on user\n     *                              input, updates edge cases\n     *\n     * @param {dictionary} song     Song which is being moved\n     * @param {boolean} up          Whether song is being moved up or not (in\n     *                              which case it is moving down)\n     *\n     * @pre                         If n is the song being moved, the current order\n     *                              of songs on the UI may be a, b, ..., m, n, o, ..., y, z\n     * @post                        New order of songs will be a, b, ..., n, m, o, ..., y, z (if up)\n     *                              or a, b, ..., m, o, n, ..., y, z (if !up)\n     */\n    handleMove = (song, up) => {\n        // Copy panels to local variable\n        let newPanels = [...this.state.panels];\n        const idx = newPanels.indexOf(song);\n\n        // Reorder songs based on whether the song is being moved up or down\n        if (up) {\n            newPanels[idx - 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx - 1] };\n        } else {\n            newPanels[idx + 1] = { ...song };\n            newPanels[idx] = { ...this.state.panels[idx + 1] };\n        }\n\n        // Update first and last for the edge cases\n        newPanels[0].first = true;\n        newPanels[1].first = false;\n        newPanels[newPanels.length - 1].last = true;\n        newPanels[newPanels.length - 2].last = false;\n\n        // Update state\n        this.setState({ panels: newPanels });\n    };\n\n    /**\n     * @brief       Handler for when user submits guess\n     * @details     Checks if order of songs is correct, then updates scores and\n     *              player stats as necessary, and finally loads next round of songs\n     *\n     * @pre         currScore, highScore, runStats, allStats, and UI is set\n     * @post        currScore = highScore = 0 if user incorrect, increment if correct.\n     *              runStats and allStats are updated with new user guess. Show user whether\n     *              they were correct or not, and load new songs into UI.ÃŸ\n     */\n    handleGuess = () => {\n        let correct = true;\n\n        // Copy state vars to local vars\n        let currScore = this.state.currScore;\n        let highScore = this.state.highScore;\n\n        let runStats = { ...this.state.runStats };\n        let allStats = { ...this.state.allStats };\n\n        // Update runStats and allStats\n        runStats.totalGuesses++;\n        allStats.totalGuesses++;\n        runStats.difficultySum += this.state.songDifficulty;\n        allStats.difficultySum += this.state.songDifficulty;\n\n        // Loop through songs to check if user's guess was correct\n        for (let i = 1; i < this.state.songDifficulty && correct; i++) {\n            if (\n                parseInt(this.state.panels[i - 1].rank) >\n                parseInt(this.state.panels[i].rank)\n            ) {\n                correct = false;\n            }\n        }\n\n        // Update currScore, runStats, and allStats based on if user was correct\n        if (correct) {\n            $(\"#correctGuess\").modal(\"show\");\n            currScore++;\n            runStats.totalCorrect++;\n            allStats.totalCorrect++;\n        } else {\n            $(\"#incorrectGuess\").modal(\"show\");\n            currScore = 0;\n        }\n\n        // Update if user has new highScore\n        if (currScore > highScore) {\n            highScore = currScore;\n        }\n\n        // Update state\n        this.setState({ currScore, highScore, runStats, allStats });\n\n        // Store allStats and highScore to local storage so that the data persists across runs\n        localStorage.setItem(\"allStats\", JSON.stringify(allStats));\n        localStorage.setItem(\"highScore\", highScore);\n\n        // Load new songs into UI\n        this.handleSongLoad(this.state.songDifficulty);\n    };\n\n    /**\n     * @brief       Handler for when user wants to reset game\n     * @details     Resets all scores and player stats to clean slate, and resets data in local storage.\n     *              Also resets the current songs in the UI and changes songDifficulty back to 3 (default).\n     *\n     * @pre         currScore, highScore, runStats, and allStats contain updated numbers on players gameplay.\n     *              There are also (songDifficulty) songs loaded into the UI\n     * @post        currScore = highScore = 0, runStats and allStats are reset,\n     *              songDifficulty = 3, and new songs loaded into UI.\n     */\n    handleReset = () => {\n        // Prevents user from resetting app while backend is not completely ready, as this would cause the app to crash\n        if (!this.state.backendActive || !this.state.backendReady) {\n            return;\n        }\n\n        // Reset all specified variables\n        this.setState({\n            currScore: 0,\n            highScore: 0,\n            songDifficulty: 3,\n            allStats: {\n                totalCorrect: 0,\n                totalGuesses: 0,\n                difficultySum: 0,\n            },\n            runStats: {\n                totalCorrect: 0,\n                totalGuesses: 0,\n                difficultySum: 0,\n            },\n        });\n\n        // Clear data from local storage\n        localStorage.removeItem(\"allStats\");\n        localStorage.removeItem(\"highScore\");\n\n        // Load new songs into the UI\n        this.handleSongLoad(3);\n    };\n\n    /**\n     * @brief                       Loads songs into the UI\n     * @details                     Shuffles songs in songBank and loads the first\n     *                              (songDifficulty) songs into the UI\n     *\n     * @param {int} songDifficulty  Number of songs to be loaded into the UI\n     *\n     * @pre                         songBank has all songs loaded into it. UI may or\n     *                              may not already have songs in it\n     * @post                        A random (songDifficulty) number of songs will\n     *                              be loaded into the UI\n     */\n    handleSongLoad = (songDifficulty) => {\n        // Get array [0, 1, 2, ..., 99] where each num is an index to a song in songBank\n        let songIndices = Array(100)\n            .fill()\n            .map((_, index) => index);\n\n        // Randomly shuffle the array of indices\n        let orderedSongIndices = this.shuffleIndices(songIndices);\n\n        // Copy songs into oldPanels before they are replaced\n        const oldPanels = [...this.state.panels];\n\n        // Add the first (songDifficulty) number of songs into panels\n        let panels = [];\n        for (let i = 0; i < songDifficulty; i++) {\n            panels.push(this.state.songBank[orderedSongIndices[i]]);\n            panels[i].first = i === 0;\n            panels[i].last = i === songDifficulty - 1;\n        }\n\n        // Update the state to load the new songs into the UI\n        this.setState({ orderedSongIndices, panels, oldPanels });\n    };\n\n    /**\n     * @brief                   Shuffles an array\n     * @details                 Shuffles an array of indices into a random order\n     *\n     * @param {int[]} indices   Array of indices to songs in songBank\n     * @returns                 Shuffled array whose contents are identical to indices param\n     */\n    shuffleIndices = (indices) => {\n        let currIdx = indices.length,\n            randIdx;\n\n        // Loop that randomly keeps swapping elements to currIdx, effectively shuffling the array\n        while (currIdx !== 0) {\n            randIdx = Math.floor(Math.random() * currIdx);\n            currIdx--;\n\n            [indices[currIdx], indices[randIdx]] = [\n                indices[randIdx],\n                indices[currIdx],\n            ];\n        }\n\n        // Return the result of the shuffle\n        return indices;\n    };\n\n    /**\n     * @brief       Constructor of App component\n     * @details     Function that is called when the webpage is first loaded. Attempts to\n     *              communicate with backend and handles response as appropriate.\n     *\n     * @pre         Webpage is not yet loaded\n     * @post        Frontend has attempted to connect with backend and handles response as appropriate\n     */\n    constructor() {\n        super();\n        axios\n            .get(\"http://localhost:8080/\")\n            .then((res) => {\n                // Response was received successfully with status 200 (\"OK\")\n                if (res.status === 200) {\n                    // Update state as appropriate and include data received from backend\n                    this.setState({\n                        backendActive: true,\n                        backendReady: true,\n                        songBank: res.data,\n                    });\n\n                    // Load songs into UI\n                    this.handleSongLoad(3);\n\n                    // Display instruction menu to user on startup\n                    document.getElementById(\"infoBtn\").click();\n                }\n            })\n            .catch((error) => {\n                if (error.request.status === 0) {\n                    // Backend server is not being detected, i.e. it is not running\n                    this.setState({\n                        backendActive: false,\n                        backendReady: false,\n                    });\n                } else {\n                    // Backend server is active but is likely sending back 425, since web scraper is not finished\n                    if (error.response.status === 425) {\n                        this.setState({\n                            backendActive: true,\n                            backendReady: false,\n                        });\n                    } else {\n                        this.setState({\n                            backendActive: false,\n                            backendReady: false,\n                        });\n                    }\n                }\n            });\n    }\n\n    /**\n     * @brief       Render function for App component\n     * @detail      Render function for App component that loads in subcomponents\n     *              depending on the state of the backend\n     *\n     * @returns     App component\n     */\n    render() {\n        if (!this.state.backendActive || !this.state.backendReady) {\n            // If there is any sort of issue with the backend, show the loading screen\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                    />\n                    <main className=\"container\">\n                        <Loading backendActive={this.state.backendActive} />\n                    </main>\n                </React.Fragment>\n            );\n        } else {\n            // There is no issue with the backend, so start game normally\n            return (\n                <React.Fragment>\n                    <NavBar\n                        songDifficulty={this.state.songDifficulty}\n                        onDifficulty={this.handleDifficulty}\n                        currScore={this.state.currScore}\n                        highScore={this.state.highScore}\n                        onReset={this.handleReset}\n                        runStats={this.state.runStats}\n                        allStats={this.state.allStats}\n                    />\n                    <main className=\"container\">\n                        <SongDashboard\n                            panels={this.state.panels}\n                            oldPanels={this.state.oldPanels}\n                            onMove={this.handleMove}\n                            onGuess={this.handleGuess}\n                        />\n                    </main>\n                </React.Fragment>\n            );\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}